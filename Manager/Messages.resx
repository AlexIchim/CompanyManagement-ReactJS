<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ErrorWhileAddingPosition_EmptyName" xml:space="preserve">
    <value>'Position could not be added: Name field is empty.'</value>
  </data>
  <data name="ErrorWhileAddingPosition_NameTooLong" xml:space="preserve">
    <value>'Position could not be updated: Name too long.'</value>
  </data>
  <data name="ErrorWhileDeletingProject" xml:space="preserve">
    <value>'Project coud not be deleted.'</value>
  </data>
  <data name="ErrorWhileReleasingEmployee" xml:space="preserve">
    <value>'Employee does not exist'</value>
  </data>
  <data name="ErrorWhileUpdatingDepartment_InvalidId" xml:space="preserve">
    <value>'Department could not be modified: Invalid department id'</value>
  </data>
  <data name="ErrorWhileUpdatingPosition" xml:space="preserve">
    <value>'Position could not be modified.'</value>
  </data>
  <data name="ErrorWhileUpdatingPosition_EmptyName" xml:space="preserve">
    <value>'Position could not be modified: Name field is empty.'</value>
  </data>
  <data name="ErrorWhileUpdatingPosition_NameTooLong" xml:space="preserve">
    <value>'Position could not be modified: Name too long.'</value>
  </data>
  <data name="SuccessfullyAddedDepartment" xml:space="preserve">
    <value>'Department was added with success'</value>
  </data>
  <data name="SuccessfullyAddedPosition" xml:space="preserve">
    <value>'Position was added with success'</value>
  </data>
  <data name="SuccessfullyReleasedEmployee" xml:space="preserve">
    <value>'Employee was released with success'</value>
  </data>
  <data name="SuccessfullyDeletedProject" xml:space="preserve">
    <value>'Successfully deleted project.'</value>
  </data>
  <data name="SuccessfullyUpdatedDepartment" xml:space="preserve">
    <value>'Department was updated with success'</value>
  </data>
  <data name="SuccessfullyUpdatedPosition" xml:space="preserve">
    <value>'Position was updated with success'</value>
  </data>
  <data name="ErrorWhileUpdatingPosition_InvalidId" xml:space="preserve">
    <value>'Error while updating position: Invalid id'</value>
  </data>
  <data name="ErrorWhileAddingDepartment_EmptyName" xml:space="preserve">
    <value>'Department could not be added: Name field is empty.'</value>
  </data>
  <data name="ErrorWhileAddingDepartment_NameTooLong" xml:space="preserve">
    <value>'Department could not be updated: Name too long.'</value>
  </data>
  <data name="ErrorWhileAddingDepartment" xml:space="preserve">
    <value>'Department already exist in this office'</value>
  </data>
  <data name="ErrorWhileAddingDepartment_OfficeIdInvalid" xml:space="preserve">
    <value>'Department could not be added: OfficeId invalid.'</value>
  </data>
  <data name="ErrorWhileUpdatingDepartment_OfficeIdInvalid" xml:space="preserve">
    <value>'Department could not be updated: OfficeId invalid.'</value>
  </data>
  <data name="AllocationIdInvalid" xml:space="preserve">
    <value>'Allocation id invalid.'</value>
  </data>
  <data name="EmployeeAlreadyOnProject" xml:space="preserve">
    <value>'Employee already allocated to this project.'</value>
  </data>
  <data name="EmployeeFreeTimeNotEnough" xml:space="preserve">
    <value>'Employee does not have enough unallocated time.'</value>
  </data>
  <data name="EmployeeIdInvalid" xml:space="preserve">
    <value>'Invalid employee id'</value>
  </data>
  <data name="ErrorWhileAddingAllocation" xml:space="preserve">
    <value>'Error while adding allocation:'</value>
  </data>
  <data name="ErrorWhileDeleteingAllocation" xml:space="preserve">
    <value>'Error while deleting allocation.'</value>
  </data>
  <data name="ErrorWhileUpdatingAllocation" xml:space="preserve">
    <value>'Error while updating allocation:'</value>
  </data>
  <data name="SuccessfullyAddedAllocation" xml:space="preserve">
    <value>'Allocation added successfully.'</value>
  </data>
  <data name="SuccessfullyDeletedAllocation" xml:space="preserve">
    <value>'Successfully deleted allocation.'</value>
  </data>
  <data name="SuccessfullyUpdatedAllocation" xml:space="preserve">
    <value>'Successfully updated allocation'</value>
  </data>
  <data name="ErrorWhileUpdatingDepartment_EmptyName" xml:space="preserve">
    <value>Department could not be updated: Name field is empty.</value>
  </data>
  <data name="ErrorWhileUpdatingDepartment_NameTooLong" xml:space="preserve">
    <value>Department could not be updated: Name too long.</value>
  </data>
</root>